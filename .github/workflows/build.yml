name: Create NoHands AMIs

on:
  push:
    branches:
      - main

jobs:
  build-ami:
    runs-on: ubuntu-latest
    name: Build AMI for scenario2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for Packer + Ansible
        run: docker build -t packer-ansible-builder .

      - name: Set Packer Vars
        run: |
          echo 'PACKER_VARS=-var subnet_id=${{ secrets.SUBNET_ID }} -var vpc_id=${{ secrets.VPC_ID }}' >> $GITHUB_ENV

      - name: Initialize Packer Plugins
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ github.workspace }}/.packer-plugins:/root/.config/packer/plugins \
            -w /workspace/scenario2 \
            packer-ansible-builder \
            packer init .

      - name: Run Packer Build and capture AMI ID
        id: packer-build
        run: |
          echo "üß™ PACKER_VARS=$PACKER_VARS"

          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ github.workspace }}/.packer-plugins:/root/.config/packer/plugins \
            -w /workspace/scenario2 \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            packer-ansible-builder \
            packer build -machine-readable $PACKER_VARS aws-ubuntu.pkr.hcl \
            | tee packer-output.log

          AMI_ID=$(grep 'artifact,0,id' packer-output.log | cut -d, -f6 | cut -d: -f2)
          echo "AMI_ID=$AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Conditionally Update Launch Template and Trigger Rolling Update
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          ASG_NAME="NoHands_final_ASG_scenario2"
          LT_NAME="NoHands_final_tp_scenario2"

          echo "üîç Checking if ASG exists: $ASG_NAME"

          ASG_EXISTS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ASG_NAME" \
            --region $AWS_REGION \
            --query "AutoScalingGroups[0].AutoScalingGroupName" \
            --output text || echo "NOT_FOUND")

          if [ "$ASG_EXISTS" = "$ASG_NAME" ]; then
            echo "‚úÖ ASG exists. Proceeding with Launch Template update and rolling update..."

            # Launch Template Update
            aws ec2 create-launch-template-version \
              --launch-template-name "$LT_NAME" \
              --source-version \$Latest \
              --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
              --region $AWS_REGION || \
            aws ec2 create-launch-template \
              --launch-template-name "$LT_NAME" \
              --version-description "Initial" \
              --launch-template-data "{\"ImageId\":\"$AMI_ID\", \"InstanceType\":\"t3.small\"}" \
              --region $AWS_REGION

            aws ec2 modify-launch-template \
              --launch-template-name "$LT_NAME" \
              --default-version \$Latest \
              --region $AWS_REGION

            # Rolling Update
            aws autoscaling start-instance-refresh \
              --auto-scaling-group-name "$ASG_NAME" \
              --strategy Rolling \
              --preferences '{"MinHealthyPercentage": 100, "InstanceWarmup": 60}' \
              --region $AWS_REGION
          else
            echo "‚ö†Ô∏è ASG not found. Skipping Launch Template update and rolling update."
          fi