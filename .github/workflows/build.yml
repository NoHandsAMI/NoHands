name: Create NoHands AMIs

on:
  push:
    branches:
      - main

jobs:
  build-ami:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario: [scenario1, scenario2]
    name: Build AMI for ${{ matrix.scenario }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for Packer + Ansible
        run: docker build -t packer-ansible-builder .

      - name: Set Packer Vars
        run: |
          if [ "${{ matrix.scenario }}" = "scenario1" ]; then
            echo 'PACKER_VARS=-var subnet_id=${{ secrets.SUBNET_ID }} -var security_group_id=${{ secrets.SECURITY_GROUP_ID }} -var log_group_name=perf-tests-scenario1' >> $GITHUB_ENV
          else
            echo 'PACKER_VARS=-var subnet_id=${{ secrets.SUBNET_ID }} -var vpc_id=${{ secrets.VPC_ID }} -var log_group_name=perf-tests-scenario2' >> $GITHUB_ENV
          fi

      - name: Initialize Packer Plugins
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ github.workspace }}/.packer-plugins:/root/.config/packer/plugins \
            -w /workspace/${{ matrix.scenario }} \
            packer-ansible-builder \
            packer init .

      - name: Run Packer Build and capture AMI ID
        id: packer-build
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ github.workspace }}/.packer-plugins:/root/.config/packer/plugins \
            -w /workspace/${{ matrix.scenario }} \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            packer-ansible-builder \
            packer build -machine-readable $PACKER_VARS aws-ubuntu.pkr.hcl \
            | tee packer-output.log

          AMI_ID=$(grep 'artifact,0,id' packer-output.log | cut -d, -f6 | cut -d: -f2)
          echo "AMI_ID=$AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Create or Update Launch Template
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          LT_NAME="NoHands_final_tp_${{ matrix.scenario }}"

          aws ec2 create-launch-template-version \
            --launch-template-name "$LT_NAME" \
            --source-version \$Latest \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --region $AWS_REGION || \
          aws ec2 create-launch-template \
            --launch-template-name "$LT_NAME" \
            --version-description "Initial" \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\", \"InstanceType\":\"t3.small\"}" \
            --region $AWS_REGION

          aws ec2 modify-launch-template \
            --launch-template-name "$LT_NAME" \
            --default-version \$Latest \
            --region $AWS_REGION

      - name: Create or Update Auto Scaling Group
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          ASG_NAME="NoHands_final_ASG_${{ matrix.scenario }}"
          LT_NAME="NoHands_final_tp_${{ matrix.scenario }}"

          ASG_EXISTS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names "$ASG_NAME" \
            --region $AWS_REGION \
            --query "AutoScalingGroups[0].AutoScalingGroupName" \
            --output text || echo "NOT_FOUND")

          if [ "$ASG_EXISTS" = "$ASG_NAME" ]; then
            echo "‚úÖ ASG exists, skipping creation."
          else
            echo "üöÄ Creating new ASG: $ASG_NAME"
            aws autoscaling create-auto-scaling-group \
              --auto-scaling-group-name "$ASG_NAME" \
              --launch-template "LaunchTemplateName=$LT_NAME" \
              --min-size 1 \
              --max-size 4 \
              --desired-capacity 1 \
              --vpc-zone-identifier "${{ secrets.SUBNET_ID }}" \
              --health-check-type EC2 \
              --health-check-grace-period 60 \
              --region $AWS_REGION
          fi

      - name: Trigger ASG Rolling Update
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          ASG_NAME="NoHands_final_ASG_${{ matrix.scenario }}"
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --strategy Rolling \
            --preferences '{"MinHealthyPercentage": 100, "InstanceWarmup": 60}' \
            --region ap-northeast-2

      - name: Check ASG Rolling Update Status
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          ASG_NAME="NoHands_final_ASG_${{ matrix.scenario }}"
          aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name "$ASG_NAME" \
            --region ap-northeast-2

      - name: Clean up old Launch Template versions
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          LT_NAME="NoHands_final_tp_${{ matrix.scenario }}"
          echo "üßπ Cleaning up old Launch Template versions for $LT_NAME..."

          OLD_VERSIONS=$(aws ec2 describe-launch-template-versions \
            --launch-template-name "$LT_NAME" \
            --region $AWS_REGION \
            --query 'LaunchTemplateVersions[?DefaultVersion==`false`].VersionNumber' \
            --output text)

          if [ -n "$OLD_VERSIONS" ]; then
            echo "üóëÔ∏è Deleting versions: $OLD_VERSIONS"
            aws ec2 delete-launch-template-versions \
              --launch-template-name "$LT_NAME" \
              --versions $OLD_VERSIONS \
              --region $AWS_REGION
          else
            echo "‚úÖ No old versions to delete."
          fi